package com.example.myalkansyamobile.utils

import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Environment
import android.widget.Toast
import androidx.core.content.FileProvider
import com.github.doyaaaaaken.kotlincsv.dsl.csvWriter
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.File
import java.text.SimpleDateFormat
import java.util.*

/**
 * Service class to handle exporting data to CSV files
 */
class ExportService(private val context: Context) {

    /**
     * Exports financial data to CSV files and shares them
     */
    suspend fun exportAndShareFinancialData(
        incomes: List<Any>? = null,
        expenses: List<Any>? = null,
        budgets: List<Any>? = null,
        savingsGoals: List<Any>? = null
    ) {
        val uri = exportToCSV(incomes, expenses, budgets, savingsGoals)
        
        if (uri != null) {
            shareCSVFile(uri)
        } else {
            withContext(Dispatchers.Main) {
                Toast.makeText(context, "Failed to generate export file", Toast.LENGTH_SHORT).show()
            }
        }
    }

    /**
     * Exports financial data to CSV file
     * @return URI of the created file or null if export failed
     */
    private suspend fun exportToCSV(
        incomes: List<Any>? = null,
        expenses: List<Any>? = null,
        budgets: List<Any>? = null,
        savingsGoals: List<Any>? = null
    ): Uri? = withContext(Dispatchers.IO) {
        try {
            // Create file name with timestamp
            val timestamp = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.getDefault()).format(Date())
            val fileName = "MyAlkansya_Export_$timestamp.csv"
            
            // Get the Downloads directory
            val downloadsDir = context.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS)
            val file = File(downloadsDir, fileName)
            
            // Create CSV writer
            val writer = csvWriter()
            
            // Generate CSV content
            writer.open(file, append = false) {
                // Write header
                writeRow("MyAlkansya Financial Export - $timestamp")
                writeRow(listOf()) // empty row for spacing
                
                // Financial Summary Section
                writeRow("FINANCIAL SUMMARY")
                writeRow(listOf("Category", "Amount"))
                
                // Here we'd add actual summary data
                writeRow(listOf("Total Income", "0.00"))
                writeRow(listOf("Total Expenses", "0.00"))
                writeRow(listOf("Total Budget", "0.00"))
                writeRow(listOf("Total Savings", "0.00"))
                writeRow(listOf()) // empty row for spacing
                
                // Income Section
                if (!incomes.isNullOrEmpty()) {
                    writeRow("INCOME RECORDS")
                    writeRow(listOf("ID", "Source", "Amount", "Date", "Currency"))
                    
                    // The actual data would be written here in a real implementation
                    // For now, just write placeholder data
                    writeRow(listOf("1", "Salary", "5000.00", "2023-11-01", "PHP"))
                    writeRow(listOf()) // empty row for spacing
                }
                
                // Expenses Section
                if (!expenses.isNullOrEmpty()) {
                    writeRow("EXPENSE RECORDS")
                    writeRow(listOf("ID", "Subject", "Category", "Amount", "Date", "Currency"))
                    
                    // The actual data would be written here in a real implementation
                    writeRow(listOf()) // empty row for spacing
                }
                
                // Budget Section
                if (!budgets.isNullOrEmpty()) {
                    writeRow("BUDGET RECORDS")
                    writeRow(listOf("ID", "Category", "Monthly Budget", "Total Spent", "Month", "Year"))
                    
                    // The actual data would be written here in a real implementation
                    writeRow(listOf()) // empty row for spacing
                }
                
                // Savings Goals Section
                if (!savingsGoals.isNullOrEmpty()) {
                    writeRow("SAVINGS GOALS")
                    writeRow(listOf("ID", "Goal", "Target Amount", "Current Amount", "Target Date", "Progress (%)"))
                    
                    // The actual data would be written here in a real implementation
                    writeRow(listOf()) // empty row for spacing
                }
                
                // Footer with export info
                writeRow(listOf("Generated by MyAlkansya App on", SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date())))
            }
            
            // Create and return content URI using FileProvider
            val authority = "${context.packageName}.fileprovider"
            FileProvider.getUriForFile(context, authority, file)
        } catch (e: Exception) {
            e.printStackTrace()
            withContext(Dispatchers.Main) {
                Toast.makeText(context, "Export failed: ${e.message}", Toast.LENGTH_LONG).show()
            }
            null
        }
    }
    
    /**
     * Share the exported CSV file
     */
    private fun shareCSVFile(uri: Uri) {
        val intent = Intent(Intent.ACTION_SEND).apply {
            type = "text/csv"
            putExtra(Intent.EXTRA_STREAM, uri)
            addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
        }
        
        val chooser = Intent.createChooser(intent, "Share MyAlkansya Export")
        chooser.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        context.startActivity(chooser)
    }
}
